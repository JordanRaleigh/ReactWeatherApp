[{"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/index.tsx":"1","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/reportWebVitals.ts":"2","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/HomePage.tsx":"3","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Header.tsx":"4","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Layout.tsx":"5","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Weather.tsx":"6","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/CountDown.tsx":"7","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/api/client.ts":"8","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/AdvancedWeather.tsx":"9","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/svg/weather-artwork-svg.tsx":"10"},{"size":377,"mtime":1610909213598,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1610363817000,"results":"13","hashOfConfig":"12"},{"size":1664,"mtime":1611259102837,"results":"14","hashOfConfig":"12"},{"size":2564,"mtime":1611260266029,"results":"15","hashOfConfig":"12"},{"size":1294,"mtime":1610367749000,"results":"16","hashOfConfig":"12"},{"size":2908,"mtime":1611259267855,"results":"17","hashOfConfig":"12"},{"size":883,"mtime":1610942797439,"results":"18","hashOfConfig":"12"},{"size":1633,"mtime":1612800162183,"results":"19","hashOfConfig":"12"},{"size":887,"mtime":1610988422549,"results":"20","hashOfConfig":"12"},{"size":7322,"mtime":1610852596351,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1vleufr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/index.tsx",[],["46","47"],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/reportWebVitals.ts",[],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/HomePage.tsx",[],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Header.tsx",[],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Layout.tsx",[],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/Weather.tsx",["48"],"import CountDown from './CountDown';\nimport { WeatherEntry } from '../api/client';\nimport { useState } from 'react';\nimport AdvancedWeather from './AdvancedWeather';\n\ninterface PropsEntry {\n  fetchWeather: (\n    zipCode: number,\n    unit: string,\n    isUpdate?: boolean\n  ) => Promise<void>;\n  currentWeather: WeatherEntry;\n}\n\n//Weather will use our currentWeather to display the current weather in a certain zip code. The child component CountDown is rendering here.\n\nconst Weather: React.FC<PropsEntry> = (props) => {\n  //Initially showing only important weather details and can toggle more advanced details.\n  const [moreDetailsEnabled, setMoreDetailsEnabled] = useState(false);\n  const { main, name, weather, zipCode, unit } = props.currentWeather;\n\n  //rendering important weather data and passing the fetchWeather prop down to CountDown so we can refresh. Also rendering a button to display advanced weather details on command.\n\n  return (\n    <div className=\"row w-75 m-auto justify-content-center \">\n      <div className=\"col-md-6 text-center\">\n        <h2>\n          In <span className=\"text-underline display-4\">{name}</span>, it is\n        </h2>\n        <div\n          className=\"display-4\"\n          style={{\n            color: main.temp > 75 ? '#FA6B6E' : '#84B4FE',\n          }}\n        >\n          {Math.round(main.temp)}&deg; F\n        </div>\n        <img\n          src={`http://openweathermap.org/img/wn/${weather[0].icon}@4x.png`}\n          alt=\"current-weather-icon\"\n        ></img>\n      </div>\n      <div className=\"col-md-6 flex-column text-center\">\n        <div className=\"weather-tag\">\n          <p>Feels Like</p>\n          <p className=\"\">{Math.round(main.feels_like)} &deg;F</p>\n        </div>\n        <div className=\"weather-tag\">\n          <p>High</p>\n          <p>{Math.round(main.temp_max)} &deg;F</p>\n        </div>\n        <div className=\"weather-tag\">\n          <p>Low</p>\n          <p>{Math.round(main.temp_min)} &deg;F</p>\n        </div>\n        {weather.map((item, index) => {\n          return (\n            <div className=\"weather-tag\" key={index}>\n              <p>\n                {item.main}\n                <img\n                  src={`http://openweathermap.org/img/wn/${item.icon}.png`}\n                ></img>\n              </p>\n              <p className=\"\">{item.description}</p>\n            </div>\n          );\n        })}\n\n        {moreDetailsEnabled && (\n          <AdvancedWeather currentWeather={props.currentWeather} />\n        )}\n        <button\n          className=\"btn btn-link\"\n          onClick={() => {\n            setMoreDetailsEnabled((moreDetailsEnabled) => !moreDetailsEnabled);\n          }}\n        >\n          {moreDetailsEnabled ? 'Less' : 'More'} Details\n        </button>\n      </div>\n      <CountDown\n        updateWeather={() => {\n          props.fetchWeather(zipCode, unit);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Weather;\n","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/CountDown.tsx",["49"],"import styled from '@emotion/styled';\nimport React, { useState, useEffect } from 'react';\n\nconst StyledDiv = styled.div`\n  padding: 1rem;\n  text-align: center;\n`;\n\n//Countdown refreshes the weather data every 10 seconds\n\nconst CountDown: React.FC<{ updateWeather: () => void }> = ({\n  updateWeather,\n}) => {\n  //setting state to 10 seconds\n  const [seconds, setSeconds] = useState(10);\n\n  //setTimeout counts down every second and once it hits 0, calls updateWeather to refresh the api call and data\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => {\n        let updatedSeconds = seconds - 1;\n        setSeconds(updatedSeconds);\n      }, 1000);\n    } else {\n      updateWeather();\n      setSeconds(10);\n    }\n  }, [seconds]);\n\n  return (\n    <StyledDiv>\n      <h3>Refreshing In:</h3>\n      <p>{seconds} seconds</p>\n    </StyledDiv>\n  );\n};\nexport default CountDown;\n","/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/api/client.ts",[],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/AdvancedWeather.tsx",[],["50","51"],"/Users/Jordan/Documents/Job Search/codeChallenges/Ternary/react-homework 3/src/components/svg/weather-artwork-svg.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":61,"column":17,"nodeType":"58","endLine":63,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":28,"column":6,"nodeType":"61","endLine":28,"endColumn":15,"suggestions":"62"},{"ruleId":"52","replacedBy":"63"},{"ruleId":"54","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateWeather'. Either include it or remove the dependency array. If 'updateWeather' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["67"],["65"],["66"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [seconds, updateWeather]",{"range":"70","text":"71"},[731,740],"[seconds, updateWeather]"]